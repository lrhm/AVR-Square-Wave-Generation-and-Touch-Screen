
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000004a6  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c0  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000212  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e2  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  7a:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <setADC>:
PWM output on OCR1B
*/

void setADC()
{
	ADMUX |= (1<<REFS0);
  82:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA = (1<<ADEN)|(7<<ADPS0);
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <readADC>:

uint16_t readADC(uint8_t ch)
{
	
	ch &= 0b00000111;
	ADMUX &= 0b11100000;
  8a:	97 b1       	in	r25, 0x07	; 7
  8c:	90 7e       	andi	r25, 0xE0	; 224
  8e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ch;
  90:	97 b1       	in	r25, 0x07	; 7
}

uint16_t readADC(uint8_t ch)
{
	
	ch &= 0b00000111;
  92:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0b11100000;
	ADMUX |= ch;
  94:	98 2b       	or	r25, r24
  96:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);
  98:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <readADC+0x10>
	ADCSRA |= (1<<ADIF);
  9e:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	95 b1       	in	r25, 0x05	; 5
}
  a4:	08 95       	ret

000000a6 <getX>:
uint16_t getX(){
	DDRA=((1<<x1)|(1<<x2));
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTA=((0<<x2)|(1<<x1));
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	83 ec       	ldi	r24, 0xC3	; 195
  b0:	99 e0       	ldi	r25, 0x09	; 9
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <getX+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <getX+0x12>
  b8:	00 00       	nop
	_delay_ms(10);

	return readADC(3);
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 45 00 	call	0x8a	; 0x8a <readADC>
}
  c0:	08 95       	ret

000000c2 <getY>:
uint16_t getY(){
	uint16_t y;
	
	DDRA=((1<<y1)|(1<<y2));
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	8a bb       	out	0x1a, r24	; 26
	PORTA=((1<<y1)|(0<<y2));
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <getY+0xc>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <getY+0x12>
  d4:	00 00       	nop
	_delay_ms(10);
	return readADC(4);
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	0e 94 45 00 	call	0x8a	; 0x8a <readADC>
	
}
  dc:	08 95       	ret

000000de <InitMusic>:

void InitMusic()
{
	// Configure OC1B pin as output

	DDRD |= 1 << (DDD4); //OC1B as output
  de:	8c 9a       	sbi	0x11, 4	; 17

	// timer1 configuration (for PWM)
	TCCR1A |= 1 << (COM1B1);  // Clear OC1A/OC1B on compare match
  e0:	8f b5       	in	r24, 0x2f	; 47
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	8f bd       	out	0x2f, r24	; 47

	
	TCCR1B |= 1<< (WGM13) 	//mode 8, PWM, Phase and Frequency Correct (TOP value is ICR1)
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	82 61       	ori	r24, 0x12	; 18
  ea:	8e bd       	out	0x2e, r24	; 46
  ec:	08 95       	ret

000000ee <PlayMusic>:
Plays music.
*/

void PlayMusic(  int* pMusicNotes /** Pointer to table containing music data */,
uint8_t tempo /** paying tempo from 0 to 100. Higher value = slower playback*/ )
{
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	68 9f       	mul	r22, r24
 102:	d0 01       	movw	r26, r0
 104:	69 9f       	mul	r22, r25
 106:	b0 0d       	add	r27, r0
 108:	11 24       	eor	r1, r1
			OCR1B = 0;
		}
		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
 10a:	0f 2e       	mov	r0, r31
 10c:	f4 e6       	ldi	r31, 0x64	; 100
 10e:	ef 2e       	mov	r14, r31
 110:	f1 2c       	mov	r15, r1
 112:	f0 2d       	mov	r31, r0
			ICR1H = (note >> 8);
			ICR1L = note;
		}

		//wait duration
		for(i=0;i<32-duration;i++)
 114:	60 e2       	ldi	r22, 0x20	; 32
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
 11c:	1d c0       	rjmp	.+58     	; 0x158 <PlayMusic+0x6a>
	{
		note = *pMusicNotes;
		pMusicNotes++;

		duration = *pMusicNotes;
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	9b 81       	ldd	r25, Y+3	; 0x03
 122:	24 96       	adiw	r28, 0x04	; 4
		pMusicNotes++;

		if( p == note )
 124:	21 30       	cpi	r18, 0x01	; 1
 126:	31 05       	cpc	r19, r1
 128:	19 f4       	brne	.+6      	; 0x130 <PlayMusic+0x42>
		{
			//pause, do not generate any sound
			OCR1B = 0;
 12a:	19 bc       	out	0x29, r1	; 41
 12c:	18 bc       	out	0x28, r1	; 40
 12e:	04 c0       	rjmp	.+8      	; 0x138 <PlayMusic+0x4a>
		}
		else
		{
			//not a pause, generate tone
			OCR1B = DEFAULT_VOLUME;
 130:	f9 bc       	out	0x29, r15	; 41
 132:	e8 bc       	out	0x28, r14	; 40

			//set frequency
			ICR1H = (note >> 8);
 134:	37 bd       	out	0x27, r19	; 39
			ICR1L = note;
 136:	26 bd       	out	0x26, r18	; 38
		}

		//wait duration
		for(i=0;i<32-duration;i++)
 138:	ab 01       	movw	r20, r22
 13a:	48 1b       	sub	r20, r24
 13c:	59 0b       	sbc	r21, r25
 13e:	14 16       	cp	r1, r20
 140:	15 06       	cpc	r1, r21
 142:	54 f4       	brge	.+20     	; 0x158 <PlayMusic+0x6a>
 144:	20 2f       	mov	r18, r16
 146:	31 2f       	mov	r19, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	fd 01       	movw	r30, r26
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <PlayMusic+0x5c>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	24 17       	cp	r18, r20
 154:	35 07       	cpc	r19, r21
 156:	c1 f7       	brne	.-16     	; 0x148 <PlayMusic+0x5a>
	int duration;
	int note;
	int i;
	uint16_t delay = tempo * 1000;

	while( *pMusicNotes )
 158:	28 81       	ld	r18, Y
 15a:	39 81       	ldd	r19, Y+1	; 0x01
 15c:	21 15       	cp	r18, r1
 15e:	31 05       	cpc	r19, r1
 160:	f1 f6       	brne	.-68     	; 0x11e <PlayMusic+0x30>

	}
	

	//turn off any sound
	OCR1B = 0;
 162:	19 bc       	out	0x29, r1	; 41
 164:	18 bc       	out	0x28, r1	; 40
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	08 95       	ret

00000174 <main>:
	{g7,f7,e7,d7,c7,b7,a7}
};


main()
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	00 d0       	rcall	.+0      	; 0x17a <main+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x8>
 17c:	00 d0       	rcall	.+0      	; 0x17e <main+0xa>
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	InitMusic();
 182:	0e 94 6f 00 	call	0xde	; 0xde <InitMusic>
	setADC();
 186:	0e 94 41 00 	call	0x82	; 0x82 <setADC>
		
		if(indy == 6 || indx == 8)
		continue;
		
		if(indx < 7){
			int temp[3] = { map[indy][indx] , 8 , MUSIC_END};
 18a:	68 94       	set
 18c:	ee 24       	eor	r14, r14
 18e:	e3 f8       	bld	r14, 3
 190:	f1 2c       	mov	r15, r1
	InitMusic();
	setADC();
	while(1)
	{

		uint16_t x = getY();
 192:	0e 94 61 00 	call	0xc2	; 0xc2 <getY>
 196:	8c 01       	movw	r16, r24
		uint16_t y = getX();
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <getX>
		
		if(x == 0 || y == 0 )
 19c:	01 15       	cp	r16, r1
 19e:	11 05       	cpc	r17, r1
 1a0:	c1 f3       	breq	.-16     	; 0x192 <main+0x1e>
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	b1 f3       	breq	.-20     	; 0x192 <main+0x1e>
		continue;
		
		int indx = (x/256.0) * 8;
		int indy = (y/256.0) * 6;
 1a6:	bc 01       	movw	r22, r24
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 56 01 	call	0x2ac	; 0x2ac <__floatunsisf>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	5b e3       	ldi	r21, 0x3B	; 59
 1b8:	0e 94 bc 01 	call	0x378	; 0x378 <__mulsf3>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 ec       	ldi	r20, 0xC0	; 192
 1c2:	50 e4       	ldi	r21, 0x40	; 64
 1c4:	0e 94 bc 01 	call	0x378	; 0x378 <__mulsf3>
 1c8:	0e 94 20 01 	call	0x240	; 0x240 <__fixsfsi>
 1cc:	4b 01       	movw	r8, r22
 1ce:	5c 01       	movw	r10, r24
		
		
		if(indy == 6 || indx == 8)
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	88 16       	cp	r8, r24
 1d4:	91 04       	cpc	r9, r1
 1d6:	e9 f2       	breq	.-70     	; 0x192 <main+0x1e>
		uint16_t y = getX();
		
		if(x == 0 || y == 0 )
		continue;
		
		int indx = (x/256.0) * 8;
 1d8:	b8 01       	movw	r22, r16
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 56 01 	call	0x2ac	; 0x2ac <__floatunsisf>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	5b e3       	ldi	r21, 0x3B	; 59
 1ea:	0e 94 bc 01 	call	0x378	; 0x378 <__mulsf3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	51 e4       	ldi	r21, 0x41	; 65
 1f6:	0e 94 bc 01 	call	0x378	; 0x378 <__mulsf3>
 1fa:	0e 94 20 01 	call	0x240	; 0x240 <__fixsfsi>
		
		
		if(indy == 6 || indx == 8)
		continue;
		
		if(indx < 7){
 1fe:	67 30       	cpi	r22, 0x07	; 7
 200:	71 05       	cpc	r23, r1
 202:	3c f6       	brge	.-114    	; 0x192 <main+0x1e>
			int temp[3] = { map[indy][indx] , 8 , MUSIC_END};
 204:	f4 01       	movw	r30, r8
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e8 19       	sub	r30, r8
 214:	f9 09       	sbc	r31, r9
 216:	6e 0f       	add	r22, r30
 218:	7f 1f       	adc	r23, r31
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	fb 01       	movw	r30, r22
 220:	e0 5a       	subi	r30, 0xA0	; 160
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	91 81       	ldd	r25, Z+1	; 0x01
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	fc 82       	std	Y+4, r15	; 0x04
 22e:	eb 82       	std	Y+3, r14	; 0x03
 230:	1e 82       	std	Y+6, r1	; 0x06
 232:	1d 82       	std	Y+5, r1	; 0x05
			PlayMusic(temp , 20);
 234:	64 e1       	ldi	r22, 0x14	; 20
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 77 00 	call	0xee	; 0xee <PlayMusic>
 23e:	a9 cf       	rjmp	.-174    	; 0x192 <main+0x1e>

00000240 <__fixsfsi>:
 240:	0e 94 27 01 	call	0x24e	; 0x24e <__fixunssfsi>
 244:	68 94       	set
 246:	b1 11       	cpse	r27, r1
 248:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__fp_szero>
 24c:	08 95       	ret

0000024e <__fixunssfsi>:
 24e:	0e 94 9b 01 	call	0x336	; 0x336 <__fp_splitA>
 252:	88 f0       	brcs	.+34     	; 0x276 <__fixunssfsi+0x28>
 254:	9f 57       	subi	r25, 0x7F	; 127
 256:	98 f0       	brcs	.+38     	; 0x27e <__fixunssfsi+0x30>
 258:	b9 2f       	mov	r27, r25
 25a:	99 27       	eor	r25, r25
 25c:	b7 51       	subi	r27, 0x17	; 23
 25e:	b0 f0       	brcs	.+44     	; 0x28c <__fixunssfsi+0x3e>
 260:	e1 f0       	breq	.+56     	; 0x29a <__fixunssfsi+0x4c>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	1a f0       	brmi	.+6      	; 0x272 <__fixunssfsi+0x24>
 26c:	ba 95       	dec	r27
 26e:	c9 f7       	brne	.-14     	; 0x262 <__fixunssfsi+0x14>
 270:	14 c0       	rjmp	.+40     	; 0x29a <__fixunssfsi+0x4c>
 272:	b1 30       	cpi	r27, 0x01	; 1
 274:	91 f0       	breq	.+36     	; 0x29a <__fixunssfsi+0x4c>
 276:	0e 94 b5 01 	call	0x36a	; 0x36a <__fp_zero>
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	08 95       	ret
 27e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__fp_zero>
 282:	67 2f       	mov	r22, r23
 284:	78 2f       	mov	r23, r24
 286:	88 27       	eor	r24, r24
 288:	b8 5f       	subi	r27, 0xF8	; 248
 28a:	39 f0       	breq	.+14     	; 0x29a <__fixunssfsi+0x4c>
 28c:	b9 3f       	cpi	r27, 0xF9	; 249
 28e:	cc f3       	brlt	.-14     	; 0x282 <__fixunssfsi+0x34>
 290:	86 95       	lsr	r24
 292:	77 95       	ror	r23
 294:	67 95       	ror	r22
 296:	b3 95       	inc	r27
 298:	d9 f7       	brne	.-10     	; 0x290 <__fixunssfsi+0x42>
 29a:	3e f4       	brtc	.+14     	; 0x2aa <__fixunssfsi+0x5c>
 29c:	90 95       	com	r25
 29e:	80 95       	com	r24
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	8f 4f       	sbci	r24, 0xFF	; 255
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	08 95       	ret

000002ac <__floatunsisf>:
 2ac:	e8 94       	clt
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <__floatsisf+0x12>

000002b0 <__floatsisf>:
 2b0:	97 fb       	bst	r25, 7
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__floatsisf+0x12>
 2b4:	90 95       	com	r25
 2b6:	80 95       	com	r24
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	99 23       	and	r25, r25
 2c4:	a9 f0       	breq	.+42     	; 0x2f0 <__floatsisf+0x40>
 2c6:	f9 2f       	mov	r31, r25
 2c8:	96 e9       	ldi	r25, 0x96	; 150
 2ca:	bb 27       	eor	r27, r27
 2cc:	93 95       	inc	r25
 2ce:	f6 95       	lsr	r31
 2d0:	87 95       	ror	r24
 2d2:	77 95       	ror	r23
 2d4:	67 95       	ror	r22
 2d6:	b7 95       	ror	r27
 2d8:	f1 11       	cpse	r31, r1
 2da:	f8 cf       	rjmp	.-16     	; 0x2cc <__floatsisf+0x1c>
 2dc:	fa f4       	brpl	.+62     	; 0x31c <__floatsisf+0x6c>
 2de:	bb 0f       	add	r27, r27
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <__floatsisf+0x36>
 2e2:	60 ff       	sbrs	r22, 0
 2e4:	1b c0       	rjmp	.+54     	; 0x31c <__floatsisf+0x6c>
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	8f 4f       	sbci	r24, 0xFF	; 255
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	16 c0       	rjmp	.+44     	; 0x31c <__floatsisf+0x6c>
 2f0:	88 23       	and	r24, r24
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <__floatsisf+0x48>
 2f4:	96 e9       	ldi	r25, 0x96	; 150
 2f6:	11 c0       	rjmp	.+34     	; 0x31a <__floatsisf+0x6a>
 2f8:	77 23       	and	r23, r23
 2fa:	21 f0       	breq	.+8      	; 0x304 <__floatsisf+0x54>
 2fc:	9e e8       	ldi	r25, 0x8E	; 142
 2fe:	87 2f       	mov	r24, r23
 300:	76 2f       	mov	r23, r22
 302:	05 c0       	rjmp	.+10     	; 0x30e <__floatsisf+0x5e>
 304:	66 23       	and	r22, r22
 306:	71 f0       	breq	.+28     	; 0x324 <__floatsisf+0x74>
 308:	96 e8       	ldi	r25, 0x86	; 134
 30a:	86 2f       	mov	r24, r22
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	2a f0       	brmi	.+10     	; 0x31c <__floatsisf+0x6c>
 312:	9a 95       	dec	r25
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	da f7       	brpl	.-10     	; 0x312 <__floatsisf+0x62>
 31c:	88 0f       	add	r24, r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	97 f9       	bld	r25, 7
 324:	08 95       	ret

00000326 <__fp_split3>:
 326:	57 fd       	sbrc	r21, 7
 328:	90 58       	subi	r25, 0x80	; 128
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	59 f0       	breq	.+22     	; 0x346 <__fp_splitA+0x10>
 330:	5f 3f       	cpi	r21, 0xFF	; 255
 332:	71 f0       	breq	.+28     	; 0x350 <__fp_splitA+0x1a>
 334:	47 95       	ror	r20

00000336 <__fp_splitA>:
 336:	88 0f       	add	r24, r24
 338:	97 fb       	bst	r25, 7
 33a:	99 1f       	adc	r25, r25
 33c:	61 f0       	breq	.+24     	; 0x356 <__fp_splitA+0x20>
 33e:	9f 3f       	cpi	r25, 0xFF	; 255
 340:	79 f0       	breq	.+30     	; 0x360 <__fp_splitA+0x2a>
 342:	87 95       	ror	r24
 344:	08 95       	ret
 346:	12 16       	cp	r1, r18
 348:	13 06       	cpc	r1, r19
 34a:	14 06       	cpc	r1, r20
 34c:	55 1f       	adc	r21, r21
 34e:	f2 cf       	rjmp	.-28     	; 0x334 <__fp_split3+0xe>
 350:	46 95       	lsr	r20
 352:	f1 df       	rcall	.-30     	; 0x336 <__fp_splitA>
 354:	08 c0       	rjmp	.+16     	; 0x366 <__fp_splitA+0x30>
 356:	16 16       	cp	r1, r22
 358:	17 06       	cpc	r1, r23
 35a:	18 06       	cpc	r1, r24
 35c:	99 1f       	adc	r25, r25
 35e:	f1 cf       	rjmp	.-30     	; 0x342 <__fp_splitA+0xc>
 360:	86 95       	lsr	r24
 362:	71 05       	cpc	r23, r1
 364:	61 05       	cpc	r22, r1
 366:	08 94       	sec
 368:	08 95       	ret

0000036a <__fp_zero>:
 36a:	e8 94       	clt

0000036c <__fp_szero>:
 36c:	bb 27       	eor	r27, r27
 36e:	66 27       	eor	r22, r22
 370:	77 27       	eor	r23, r23
 372:	cb 01       	movw	r24, r22
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__mulsf3>:
 378:	0e 94 cf 01 	call	0x39e	; 0x39e <__mulsf3x>
 37c:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_round>
 380:	0e 94 32 02 	call	0x464	; 0x464 <__fp_pscA>
 384:	38 f0       	brcs	.+14     	; 0x394 <__mulsf3+0x1c>
 386:	0e 94 39 02 	call	0x472	; 0x472 <__fp_pscB>
 38a:	20 f0       	brcs	.+8      	; 0x394 <__mulsf3+0x1c>
 38c:	95 23       	and	r25, r21
 38e:	11 f0       	breq	.+4      	; 0x394 <__mulsf3+0x1c>
 390:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 394:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__fp_nan>
 398:	11 24       	eor	r1, r1
 39a:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__fp_szero>

0000039e <__mulsf3x>:
 39e:	0e 94 93 01 	call	0x326	; 0x326 <__fp_split3>
 3a2:	70 f3       	brcs	.-36     	; 0x380 <__mulsf3+0x8>

000003a4 <__mulsf3_pse>:
 3a4:	95 9f       	mul	r25, r21
 3a6:	c1 f3       	breq	.-16     	; 0x398 <__mulsf3+0x20>
 3a8:	95 0f       	add	r25, r21
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	55 1f       	adc	r21, r21
 3ae:	62 9f       	mul	r22, r18
 3b0:	f0 01       	movw	r30, r0
 3b2:	72 9f       	mul	r23, r18
 3b4:	bb 27       	eor	r27, r27
 3b6:	f0 0d       	add	r31, r0
 3b8:	b1 1d       	adc	r27, r1
 3ba:	63 9f       	mul	r22, r19
 3bc:	aa 27       	eor	r26, r26
 3be:	f0 0d       	add	r31, r0
 3c0:	b1 1d       	adc	r27, r1
 3c2:	aa 1f       	adc	r26, r26
 3c4:	64 9f       	mul	r22, r20
 3c6:	66 27       	eor	r22, r22
 3c8:	b0 0d       	add	r27, r0
 3ca:	a1 1d       	adc	r26, r1
 3cc:	66 1f       	adc	r22, r22
 3ce:	82 9f       	mul	r24, r18
 3d0:	22 27       	eor	r18, r18
 3d2:	b0 0d       	add	r27, r0
 3d4:	a1 1d       	adc	r26, r1
 3d6:	62 1f       	adc	r22, r18
 3d8:	73 9f       	mul	r23, r19
 3da:	b0 0d       	add	r27, r0
 3dc:	a1 1d       	adc	r26, r1
 3de:	62 1f       	adc	r22, r18
 3e0:	83 9f       	mul	r24, r19
 3e2:	a0 0d       	add	r26, r0
 3e4:	61 1d       	adc	r22, r1
 3e6:	22 1f       	adc	r18, r18
 3e8:	74 9f       	mul	r23, r20
 3ea:	33 27       	eor	r19, r19
 3ec:	a0 0d       	add	r26, r0
 3ee:	61 1d       	adc	r22, r1
 3f0:	23 1f       	adc	r18, r19
 3f2:	84 9f       	mul	r24, r20
 3f4:	60 0d       	add	r22, r0
 3f6:	21 1d       	adc	r18, r1
 3f8:	82 2f       	mov	r24, r18
 3fa:	76 2f       	mov	r23, r22
 3fc:	6a 2f       	mov	r22, r26
 3fe:	11 24       	eor	r1, r1
 400:	9f 57       	subi	r25, 0x7F	; 127
 402:	50 40       	sbci	r21, 0x00	; 0
 404:	9a f0       	brmi	.+38     	; 0x42c <__mulsf3_pse+0x88>
 406:	f1 f0       	breq	.+60     	; 0x444 <__mulsf3_pse+0xa0>
 408:	88 23       	and	r24, r24
 40a:	4a f0       	brmi	.+18     	; 0x41e <__mulsf3_pse+0x7a>
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	bb 1f       	adc	r27, r27
 412:	66 1f       	adc	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	a9 f7       	brne	.-22     	; 0x408 <__mulsf3_pse+0x64>
 41e:	9e 3f       	cpi	r25, 0xFE	; 254
 420:	51 05       	cpc	r21, r1
 422:	80 f0       	brcs	.+32     	; 0x444 <__mulsf3_pse+0xa0>
 424:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_inf>
 428:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__fp_szero>
 42c:	5f 3f       	cpi	r21, 0xFF	; 255
 42e:	e4 f3       	brlt	.-8      	; 0x428 <__mulsf3_pse+0x84>
 430:	98 3e       	cpi	r25, 0xE8	; 232
 432:	d4 f3       	brlt	.-12     	; 0x428 <__mulsf3_pse+0x84>
 434:	86 95       	lsr	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f7 95       	ror	r31
 43e:	e7 95       	ror	r30
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	c1 f7       	brne	.-16     	; 0x434 <__mulsf3_pse+0x90>
 444:	fe 2b       	or	r31, r30
 446:	88 0f       	add	r24, r24
 448:	91 1d       	adc	r25, r1
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	97 f9       	bld	r25, 7
 450:	08 95       	ret

00000452 <__fp_inf>:
 452:	97 f9       	bld	r25, 7
 454:	9f 67       	ori	r25, 0x7F	; 127
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	08 95       	ret

0000045e <__fp_nan>:
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	08 95       	ret

00000464 <__fp_pscA>:
 464:	00 24       	eor	r0, r0
 466:	0a 94       	dec	r0
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	09 06       	cpc	r0, r25
 470:	08 95       	ret

00000472 <__fp_pscB>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	12 16       	cp	r1, r18
 478:	13 06       	cpc	r1, r19
 47a:	14 06       	cpc	r1, r20
 47c:	05 06       	cpc	r0, r21
 47e:	08 95       	ret

00000480 <__fp_round>:
 480:	09 2e       	mov	r0, r25
 482:	03 94       	inc	r0
 484:	00 0c       	add	r0, r0
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0xc>
 488:	88 23       	and	r24, r24
 48a:	52 f0       	brmi	.+20     	; 0x4a0 <__fp_round+0x20>
 48c:	bb 0f       	add	r27, r27
 48e:	40 f4       	brcc	.+16     	; 0x4a0 <__fp_round+0x20>
 490:	bf 2b       	or	r27, r31
 492:	11 f4       	brne	.+4      	; 0x498 <__fp_round+0x18>
 494:	60 ff       	sbrs	r22, 0
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__fp_round+0x20>
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
